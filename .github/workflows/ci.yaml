name: "Continuous Integration"

on: [push]

jobs:
  build:
    name: "Build and Tests"
    runs-on: ubuntu-22.04

    steps:

    - name: "Checkout"
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: "Set up JDK"
      uses: actions/setup-java@v5
      with:
        distribution: 'corretto'
        java-version: '17'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v5
      with:
        gradle-version: wrapper
        # disable reading from cache on re-runs to fix possible caching issues
        cache-write-only: ${{ fromJSON(github.run_attempt) != 1 }}

    - name: "Build"
      run: ./gradlew assemble publishToMavenLocal -Psigning.skip=true --scan --console=plain --build-cache

    - name: "Test"
      run: ./gradlew check --scan --console=plain --build-cache

    - name: "Extract current version"
      run: |
        TCP_VERSION=$(./gradlew -q printVersion)
        echo "TCP_VERSION=$TCP_VERSION" >> "$GITHUB_ENV"

    - name: Select assembly tests repo branch
      run: |
        echo "Check if the branch ${GITHUB_REF##*/} exists in assembly tests repo..."
        EXISTS=$(git ls-remote --heads https://github.com/orange-buffalo/testcontainers-playwright-assembly-tests.git ${GITHUB_REF##*/})
        if [[ $EXISTS ]]; then
          echo "Will be using branch ${GITHUB_REF##*/} from assembly tests repo"
          echo "ASSEMBLY_TESTS_BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
        else 
          echo "Branch ${GITHUB_REF##*/} does not exist in assembly tests repo, using master"
          echo "ASSEMBLY_TESTS_BRANCH=master" >> $GITHUB_ENV
        fi

    - name: Checkout assembly tests repo
      uses: actions/checkout@v5
      with:
        repository: orange-buffalo/testcontainers-playwright-assembly-tests
        ref: ${{ env.ASSEMBLY_TESTS_BRANCH }}
        fetch-depth: 0
        path: ./.assembly-tests

    - name: "Test assembly"
      run: |
        cd ./.assembly-tests
        ./gradlew test -PtestcontainersPlaywrightVersion=${{ env.TCP_VERSION }} --build-cache --scan

    - name: "Save Tests Results"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: Tests Results
        path: "**/build/reports/tests/**/"
        if-no-files-found: "ignore"

    - name: "Publish Test Report"
      uses: mikepenz/action-junit-report@v5
      if: ${{ failure() }}
      with:
        report_paths: "**/build/test-results/**/TEST-*.xml"
        require_tests: false

    - name: "Publish (Pre-) Release"
      if: ${{ github.ref == 'refs/heads/master' }}
      env:
        JRELEASER_CONFIG_CONTENT: ${{ secrets.JRELEASER_CONFIG_CONTENT }}
      run: |
        mkdir -p ~/.jreleaser
        echo "$JRELEASER_CONFIG_CONTENT" > ~/.jreleaser/config.toml
        ./gradlew publish jreleaserFullRelease --scan --console=plain --build-cache
